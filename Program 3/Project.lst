Microsoft (R) Macro Assembler Version 14.00.24210.0	    10/27/16 13:01:29
MASM Templat						     Page 1 - 1


				; Christopher Smith		Project 3
				; CSCI 231		Professor J Ryder
				; Oct 2, 2016
				; Changing colors, testing plaindromes, consent loop

				TITLE MASM Template
										
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 54 68 69 73 20	source BYTE "This is the source string",0
	   69 73 20 74 68
	   65 20 73 6F 75
	   72 63 65 20 73
	   74 72 69 6E 67
	   00
 0000001A 20 50 6C 65 61	prompt1 BYTE " Please enter a string: ", 0
	   73 65 20 65 6E
	   74 65 72 20 61
	   20 73 74 72 69
	   6E 67 3A 20 00
 00000033 20 57 6F 75 6C	prompt2 BYTE " Would you like to continue? ('Y' or 'y' to continue) ", 0
	   64 20 79 6F 75
	   20 6C 69 6B 65
	   20 74 6F 20 63
	   6F 6E 74 69 6E
	   75 65 3F 20 28
	   27 59 27 20 6F
	   72 20 27 79 27
	   20 74 6F 20 63
	   6F 6E 74 69 6E
	   75 65 29 20 00
 0000006A 20 45 6E 74 65	prompt3 BYTE " Entered String: ", 0
	   72 65 64 20 53
	   74 72 69 6E 67
	   3A 20 00
 0000007C 20 52 65 76 65	prompt4 BYTE " Reversed String: ", 0
	   72 73 65 64 20
	   53 74 72 69 6E
	   67 3A 20 00

 0000008F 20 54 68 69 73	success BYTE " This String is a Palindrome! ",0
	   20 53 74 72 69
	   6E 67 20 69 73
	   20 61 20 50 61
	   6C 69 6E 64 72
	   6F 6D 65 21 20
	   00
 000000AE 20 54 68 69 73	failure BYTE " This String is NOT a Palindrome... ",0
	   20 53 74 72 69
	   6E 67 20 69 73
	   20 4E 4F 54 20
	   61 20 50 61 6C
	   69 6E 64 72 6F
	   6D 65 2E 2E 2E
	   20 00

 000000D3  0000001A [		string3 BYTE SIZEOF source DUP ('#')   ;User enters data into this string
	    23
	   ]
 000000ED  0000001A [		string4 BYTE SIZEOF string3 DUP('#')   ;Filters string3 into Caps
	    23
	   ]
 00000107  0000001A [		string5 BYTE SIZEOF string3 DUP('#')   ;Reversed version of String4
	    23
	   ]
 00000121  0000001A [		target BYTE SIZEOF string3 DUP('#')   ;Reversed version of string3
	    23
	   ]

 0000013B 00000000		counter dword ? ; Used as its namesake

 00000000			.code

 00000000			main PROC

 00000000  E8 0000005F			call chancolor ; Changes background/foreground colors

 00000005				Consent:

 00000005  E8 00000000 E		call Clrscr

 0000000A  E8 00000224			call Reseter; Resets all strings to null, prevents errors 	

 0000000F  E8 00000070			call Filter ; strips string3 down to capital letters, puts into string4

 00000014  E8 000001F8			call Reverse ; Reverses string3 and places it in target
					
 00000019  E8 000000CA			call Flip ; Reverses string4, places duplicate into string5 

 0000001E  E8 00000107			call Versus ; Tests to see if a string is a palindrome // PRESENTLY doesn't output target, but copies data into it

 00000023  B9 0000001A			mov    ecx,SIZEOF string5 ; For some reason, without this line the program doesn't work

 00000028  E8 00000000 E		call CrLf
 0000002D  BA 00000033 R		mov edx, OFFSET prompt2
 00000032  E8 00000000 E		call WriteString
 00000037  BA 000000D3 R		mov edx, OFFSET string3
 0000003C  E8 00000000 E		call ReadString			

 00000041  80 3D 000000D3 R		cmp string3[0], 'y'
	   79
 00000048  74 BB			JE Consent
 0000004A  80 3D 000000D3 R		cmp string3[0], 'Y'
	   59
 00000051  74 B2			JE Consent

 00000053  E8 00000000 E	    call DumpRegs
 00000058  E8 00000017			call altcolor  ; Reset screen to default colors, clears screen

					exit
 0000005D  6A 00	   *	    push   +000000000h
 0000005F  E8 00000000 E   *	    call   ExitProcess
 00000064			main ENDP


 00000064			chancolor PROC		; Sets the background to blue, text to yellow

 00000064  B8 0000001E		mov eax, 01Eh

 00000069  E8 00000000 E	call SetTextColor
 0000006E  E8 00000000 E	call Clrscr

 00000073  C3			ret
 00000074			chancolor ENDP


 00000074			altcolor PROC		; Resets text and background colors to default

 00000074  B8 00000007		mov eax, 007h

 00000079  E8 00000000 E	call SetTextColor
 0000007E  E8 00000000 E	call Clrscr

 00000083  C3			ret
 00000084			altcolor ENDP


 00000084			Filter PROC		; strips String down to capital letters, puts into string4

 00000084  E8 00000000 E		call CrLf
 00000089  BA 0000001A R		mov edx, OFFSET prompt1
 0000008E  E8 00000000 E		call WriteString

 00000093  BA 000000D3 R	mov edx, OFFSET string3				;Moves location of string3 to edx
 00000098  B9 0000001A			mov ecx, SIZEOF string3			;Copies size of string3 into ecx
 0000009D  E8 00000000 E		call ReadString
 000000A2  A3 0000013B R		mov counter, eax				;Measures <Actual> size of string entered
 000000A7  E8 00000000 E		call CrLf
 000000AC  8B 0D 0000013B R		mov ecx, counter ; Sets counter for a loop
 000000B2  BE 00000000			mov esi, 0
 000000B7  BF 00000000			mov edi, 0 

 000000BC				 Strip:

 000000BC  8A 86 000000D3 R			mov al, string3[esi] ; Puts char into al

 000000C2  3C 41				cmp al, 'A' ; Compares 'A' to al character
 000000C4  72 1E				JB Under_A ; If al < 'A', skip to end of loop
 000000C6  3C 5A				cmp al, 'Z' ; Compares 'A' to al character
 000000C8  77 09				JA Over_Z ; If al > 'Z', skip to end of loop

 000000CA  88 87 000000ED R			mov string4[edi], al ; Move capital letter into String4
 000000D0  47					inc edi				 ; Prepare for incoming char
 000000D1  EB 11				jmp Uppercase ; Jumps to end of loop if it is uppercase

 000000D3					Over_Z: 
 000000D3  3C 61				cmp al, 'a' ; Compares 'a' to al character
 000000D5  72 0D				JB Under_SMA ; If al < 'a', skip to end of loop
 000000D7  3C 7A				cmp al, 'z' ; Compares 'A' to al character
 000000D9  77 09				JA Over_SMZ ; If al > 'z', skip to end of loop
						
 000000DB  2C 20				sub al, 20h ; Makes lowercase letter into uppercase
 000000DD  88 87 000000ED R			mov string4[edi], al ;Puts uppercase letter into new string
 000000E3  47					inc edi				 ; Prepare for incoming char  

 000000E4					Under_A:
 000000E4					Under_SMA:
 000000E4					Over_SMZ:
 000000E4					Uppercase:

 000000E4  46					inc esi ; point to next char in string3

 000000E5  E2 D5				loop Strip

 000000E7  C3			ret
 000000E8			Filter ENDP


 000000E8			Flip PROC		; Reverses string (only accepting capital letters)

 000000E8  BE 00000000			mov esi, 0
 000000ED  BB 00000000			mov ebx, 0
 000000F2			L1:
						; At this point, string is all capitals or null / '#'
 000000F2  8A 86 000000ED R		mov al, string4[esi] ; Puts char into al 
					
 000000F8  3C 41			cmp al, 'A' ; Compares 'A' to al character
 000000FA  72 08			JB EndL2 ; If al < 'A', skip to end of loop
 000000FC  3C 5A			cmp al, 'Z' ; Compares 'A' to al character
 000000FE  77 04			JA EndL2 ; If al > 'Z', skip to end of loop

 00000100  46				inc esi ; move to next char in string
 00000101  43				inc ebx ; Increase size of string by 1

 00000102  E2 EE		loop L1
					
 00000104				EndL2: 

 00000104  4B				dec ebx ;Set bx to be last character of source string  
					;mov ebx, [SIZEOF string4]-1 ; Find location for last character of source string

					;mov ebx, [SIZEOF string4]
					;dec ebx    ;alternate way to code if previous "ebx" line didn't want to copperate

 00000105  8B F3			mov esi, ebx ; Copies location for last character of string into seperate mem address

 00000107  BF 00000000			mov edi, 0 ; Sets location for target string array's [0] spot

 0000010C  B9 0000001A			mov ecx, [SIZEOF string4] ; Sets counter for loop, size equal to source string
					;mov ecx, [ebx]+1 ; For some reason, this throws an exception; will assemble but not run

 00000111			reword: 
 00000111  8A 86 000000ED R		mov al, string4[esi]     ; Finds can copies current character of string

 00000117  3C 41			cmp al, 'A' ; Compares 'A' to al character
 00000119  72 0E			JB EndL1 ; If al < 'A', skip to end of loop
 0000011B  3C 5A			cmp al, 'Z' ; Compares 'A' to al character
 0000011D  77 0A			JA EndL1 ; If al > 'Z', skip to end of loop

 0000011F  88 87 00000107 R		mov string5[edi], al     ; Copies character from eax low register to target
 00000125  4E				dec esi                 ; Decrements mem location to previous character of source
 00000126  47				inc edi                 ; Increments mem location to next character of target

 00000127  E2 E8			loop reword
 00000129				EndL1:

 00000129  C3			ret
 0000012A			Flip ENDP


 0000012A			Versus PROC		; Resets text and background colors to default

 0000012A  BF 00000000		mov edi, 0 ; Sets location for target string array's [0] spot
 0000012F  BE 00000000		mov esi, 0 
 00000134  B9 0000001A		mov ecx, [SIZEOF string4] ; Sets counter for loop, size equal to source string

 00000139			L3:
 00000139  8A 87 00000107 R		mov al, string5[edi]
 0000013F  8A 9F 000000ED R		mov bl, string4[edi]
 00000145  3A C3			cmp al, bl ; Compares same spot in both strings
 00000147  72 67			JB Nmatch ; If the char is either too big or too small,
 00000149  77 65			JA Nmatch ; it's not a perfect match, so we jump to the end
 0000014B  47				inc edi ; Move to next value in strings

 0000014C  E2 EB		loop L3

 0000014E  BA 0000008F R		mov edx, OFFSET success ; String is a palindrome!
 00000153  E8 00000000 E		call WriteString
 00000158  E8 00000000 E		call CrLf				; Line Break
 0000015D  BA 0000006A R		mov edx, OFFSET prompt3
 00000162  E8 00000000 E		call WriteString
 00000167  BA 000000D3 R		mov edx, OFFSET string3
 0000016C  E8 00000000 E		call WriteString
 00000171  E8 00000000 E		call CrLf
 00000176  BA 0000007C R		mov edx, OFFSET prompt4
 0000017B  E8 00000000 E		call WriteString
					
 00000180  B9 0000001A			mov ecx, SIZEOF string3
 00000185  BB 00000000			mov ebx, 0 ; blank counter
 0000018A  BF 00000000			mov edi, 0 ;string counter

 0000018F				Blank:
 0000018F  8A 87 00000121 R		mov al, target[edi]
 00000195  3C 23			cmp al, '#'
 00000197  77 04			JA Tinyhop
 00000199  72 02			JB Tinyhop
 0000019B  43				inc ebx
 0000019C  47				inc edi
 0000019D				TinyHop:
 0000019D  E2 F0			loop Blank

 0000019F  BA 00000121 R		mov edx, OFFSET target
 000001A4  03 D3			add edx, ebx
 000001A6  83 C2 02			add edx, 2 ; Don't know why, but without this statement it just doesn't work
 000001A9  E8 00000000 E		call WriteString

 000001AE  EB 60			jmp Match ; We know the string is a palindrome, end the procedure

 000001B0				Nmatch:
 000001B0  BA 000000AE R		mov edx, OFFSET failure ; String is not a palindrome
 000001B5  E8 00000000 E		call WriteString
 000001BA  E8 00000000 E		call CrLf
 000001BF  BA 0000006A R		mov edx, OFFSET prompt3
 000001C4  E8 00000000 E		call WriteString
 000001C9  BA 000000D3 R		mov edx, OFFSET string3
 000001CE  E8 00000000 E		call WriteString
 000001D3  E8 00000000 E		call CrLf
 000001D8  BA 0000007C R		mov edx, OFFSET prompt4
 000001DD  E8 00000000 E		call WriteString

 000001E2  B9 0000001A			mov ecx, SIZEOF string3
 000001E7  BB 00000000			mov ebx, 0 ; blank counter
 000001EC  BF 00000000			mov edi, 0 ;string counter

 000001F1				Blankx:             ; Loop specifically designed to ensure right position is located
 000001F1  8A 87 00000121 R		mov al, target[edi]
 000001F7  3C 23			cmp al, '#'
 000001F9  77 04			JA Tinyhop2
 000001FB  72 02			JB Tinyhop2
 000001FD  43				inc ebx
 000001FE  47				inc edi
 000001FF				TinyHop2:
 000001FF  E2 F0			loop Blankx

 00000201  BA 00000121 R		mov edx, OFFSET target
 00000206  03 D3			add edx, ebx
 00000208  83 C2 02			add edx, 2 ; Don't know why, but without this statement it just doesn't work
 0000020B  E8 00000000 E		call WriteString


 00000210				Match:
 00000210  C3			ret
 00000211			Versus ENDP


 00000211			Reverse PROC 

 00000211  BB 00000019			mov ebx, [SIZEOF string3]-1 ; Find location for last character of source string

 00000216  8B F3			mov esi, ebx ; Copies location for last character of string into seperate mem address

 00000218  BF 00000000			mov edi, 0 ; Sets location for target string array's [0] spot

 0000021D  B9 0000001A			mov ecx, [SIZEOF string3] ; Sets counter for loop, size equal to source string
					;mov ecx, [ebx]+1 ; For some reason, this throws an exception; will assemble but not run

 00000222			reword2: 
 00000222  8A 86 000000D3 R		mov al, string3[esi]     ; Finds can copies current character of string

 00000228  88 87 00000121 R		mov target[edi], al     ; Copies character from eax low register to target
 0000022E  47				inc edi                 ; Increments mem location to next character of target

 0000022F  4E				dec esi                 ; Decrements mem location to previous character of source
 00000230  E2 F0			loop reword2

 00000232  C3			ret 
 00000233			Reverse ENDP

 00000233			Reseter PROC

 00000233  B9 0000001A		mov ecx, SIZEOF string3
 00000238  BF 00000000		mov edi, 0
 0000023D			reword3:      ; Finds can copies current character of string

 0000023D  C6 87 000000D3 R		mov string3[edi], '#'     ; Copies '#' string3
	   23
 00000244  C6 87 000000ED R		mov string4[edi], '#'     ; Copies '#' string4
	   23
 0000024B  C6 87 00000107 R		mov string5[edi], '#'     ; Copies '#' string5
	   23
 00000252  C6 87 00000121 R		mov target[edi], '#'     ; Copies '#' target
	   23
 00000259  47				inc edi                 ; Increments mem location to next character of string4

 0000025A  E2 E1			loop reword3

 0000025C  C3			ret 
 0000025D			Reseter ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    10/27/16 13:01:29
MASM Templat						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000013F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000025D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Filter . . . . . . . . . . . . .	P Near	 00000084 _TEXT	Length= 00000064 Public STDCALL
  Strip  . . . . . . . . . . . .	L Near	 000000BC _TEXT	
  Over_Z . . . . . . . . . . . .	L Near	 000000D3 _TEXT	
  Under_A  . . . . . . . . . . .	L Near	 000000E4 _TEXT	
  Under_SMA  . . . . . . . . . .	L Near	 000000E4 _TEXT	
  Over_SMZ . . . . . . . . . . .	L Near	 000000E4 _TEXT	
  Uppercase  . . . . . . . . . .	L Near	 000000E4 _TEXT	
Flip . . . . . . . . . . . . . .	P Near	 000000E8 _TEXT	Length= 00000042 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000F2 _TEXT	
  EndL2  . . . . . . . . . . . .	L Near	 00000104 _TEXT	
  reword . . . . . . . . . . . .	L Near	 00000111 _TEXT	
  EndL1  . . . . . . . . . . . .	L Near	 00000129 _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Reseter  . . . . . . . . . . . .	P Near	 00000233 _TEXT	Length= 0000002A Public STDCALL
  reword3  . . . . . . . . . . .	L Near	 0000023D _TEXT	
Reverse  . . . . . . . . . . . .	P Near	 00000211 _TEXT	Length= 00000022 Public STDCALL
  reword2  . . . . . . . . . . .	L Near	 00000222 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Versus . . . . . . . . . . . . .	P Near	 0000012A _TEXT	Length= 000000E7 Public STDCALL
  L3 . . . . . . . . . . . . . .	L Near	 00000139 _TEXT	
  Blank  . . . . . . . . . . . .	L Near	 0000018F _TEXT	
  TinyHop  . . . . . . . . . . .	L Near	 0000019D _TEXT	
  Nmatch . . . . . . . . . . . .	L Near	 000001B0 _TEXT	
  Blankx . . . . . . . . . . . .	L Near	 000001F1 _TEXT	
  TinyHop2 . . . . . . . . . . .	L Near	 000001FF _TEXT	
  Match  . . . . . . . . . . . .	L Near	 00000210 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
altcolor . . . . . . . . . . . .	P Near	 00000074 _TEXT	Length= 00000010 Public STDCALL
chancolor  . . . . . . . . . . .	P Near	 00000064 _TEXT	Length= 00000010 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000064 Public STDCALL
  Consent  . . . . . . . . . . .	L Near	 00000005 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
counter  . . . . . . . . . . . .	DWord	 0000013B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
failure  . . . . . . . . . . . .	Byte	 000000AE _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prompt1  . . . . . . . . . . . .	Byte	 0000001A _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000033 _DATA	
prompt3  . . . . . . . . . . . .	Byte	 0000006A _DATA	
prompt4  . . . . . . . . . . . .	Byte	 0000007C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
source . . . . . . . . . . . . .	Byte	 00000000 _DATA	
string3  . . . . . . . . . . . .	Byte	 000000D3 _DATA	
string4  . . . . . . . . . . . .	Byte	 000000ED _DATA	
string5  . . . . . . . . . . . .	Byte	 00000107 _DATA	
success  . . . . . . . . . . . .	Byte	 0000008F _DATA	
target . . . . . . . . . . . . .	Byte	 00000121 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
